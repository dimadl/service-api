/*
 * Copyright 2019 EPAM Systems
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'java'
    id "org.owasp.dependencycheck" version "5.2.0"
}

import org.owasp.dependencycheck.reporting.ReportGenerator

apply from: 'project-properties.gradle'

def branch = releaseMode ? '5.0.0' : 'master'

apply from: "https://raw.githubusercontent.com/reportportal/gradle-scripts/$branch/build-docker.gradle"
apply from: "https://raw.githubusercontent.com/reportportal/gradle-scripts/$branch/build-commons.gradle"
apply from: "https://raw.githubusercontent.com/reportportal/gradle-scripts/$branch/build-info.gradle"
apply from: "https://raw.githubusercontent.com/reportportal/gradle-scripts/$branch/release-service.gradle"
apply from: "https://raw.githubusercontent.com/reportportal/gradle-scripts/$branch/copy-database-scripts.gradle"
apply from: "https://raw.githubusercontent.com/reportportal/gradle-scripts/$branch/build-quality.gradle"
apply from: "https://raw.githubusercontent.com/reportportal/gradle-scripts/$branch/jacoco.gradle"
project.hasProperty('sealightsSession') ? apply(from: 'sealights.gradle') : println('No sealights session')

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "http://jasperreports.sourceforge.net/maven2" }
    maven { url "http://jaspersoft.artifactoryonline.com/jaspersoft/third-party-ce-artifacts" }
    releaseMode ? maven { url "http://dl.bintray.com/epam/reportportal" } : maven { url 'https://jitpack.io' }
}

dependencyManagement {
    imports {
        mavenBom(releaseMode ? 'com.epam.reportportal:commons-bom:5.0.0' : 'com.github.reportportal:commons-bom:4b7ed8a')
    }
}

dependencies {
    if (releaseMode) {
        compile 'com.epam.reportportal:commons-dao'
        compile 'com.epam.reportportal:commons-rules'
        compile 'com.epam.reportportal:commons-model'
        compile 'com.epam.reportportal:commons'
        compile 'com.epam.reportportal:plugin-api'
    } else {
        compile 'com.github.reportportal:commons-dao:5.0.0'
        compile 'com.github.reportportal:commons-rules:5.0.0'
        compile 'com.github.reportportal:commons-model:90126a9'
        compile 'com.github.reportportal:commons:5.0.0'
        compile 'com.github.reportportal:plugin-api:5.0.0'
    }

    compile 'org.springframework.boot:spring-boot-starter-aop'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-quartz'
    compile 'org.springframework.boot:spring-boot-starter-freemarker'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile("org.springframework.boot:spring-boot-starter-amqp")
    // Optional for spring-boot-starter-amqp
    compile "com.rabbitmq:http-client:2.1.0.RELEASE"

    compile 'com.sun.mail:javax.mail:1.6.2'
    compile 'net.sf.jasperreports:jasperreports:6.10.0'
    // JasperReport's export to XLS uses Apache POI
    compile 'org.apache.poi:poi:4.1.0'
    compile 'io.springfox:springfox-swagger2'

    ///// Security
    compile 'org.springframework.security.oauth:spring-security-oauth2:2.4.0.RELEASE'
    compile 'org.springframework.security:spring-security-jwt:1.0.11.RELEASE'
    compile 'org.springframework.security:spring-security-acl'
    compile 'com.github.ben-manes.caffeine:caffeine:2.8.0'

    // Metrics
    compile 'io.micrometer:micrometer-registry-prometheus:1.3.1'

//  Tests
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.flywaydb.flyway-test-extensions:flyway-spring-test:6.0.0'
}

processResources {
    dependsOn(gitInfo)
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

dependencyCheck {
    formats = [ReportGenerator.Format.HTML, ReportGenerator.Format.XML]
//    cveValidForHours = 1
}

bootJar {
    project.hasProperty('gcp') ? getArchiveFileName().set('app.jar') : archiveClassifier.set('exec')
}
jar.enabled(true)

test {
    dependsOn(copyTestDatabaseScripts)
    useJUnitPlatform()
    maxParallelForks = 1
    testLogging {
        events = ['failed']
        exceptionFormat = 'short'
    }
    reports {
        junitXml.enabled = true
    }
}

addDockerfileToGit.dependsOn createDockerfile
beforeReleaseBuild.dependsOn addDockerfileToGit
bintrayUpload.mustRunAfter build
afterReleaseBuild.dependsOn bintrayUpload
checkCommitNeeded.dependsOn removeScripts
build.dependsOn jacocoTestReport

